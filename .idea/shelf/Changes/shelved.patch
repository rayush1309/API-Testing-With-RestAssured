Index: src/test/java/userMangement/JsonReader.java
===================================================================
diff --git a/src/test/java/userMangement/JsonReader.java b/src/test/java/userMangement/JsonReader.java
deleted file mode 100644
--- a/src/test/java/userMangement/JsonReader.java	(revision 1726afdef68ec3bf6b1793da25ff53409a83a721)
+++ /dev/null	(revision 1726afdef68ec3bf6b1793da25ff53409a83a721)
@@ -1,5 +0,0 @@
-package userMangement;
-
-public class JsonReader {
-
-}
Index: enviornmentdetails.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/enviornmentdetails.properties b/enviornmentdetails.properties
new file mode 100644
--- /dev/null	(date 1701961576996)
+++ b/enviornmentdetails.properties	(date 1701961576996)
@@ -0,0 +1,2 @@
+URI=https://reqres.in
+endpoint=/api/users
\ No newline at end of file
Index: src/main/java/utils/JsonReader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/utils/JsonReader.java b/src/main/java/utils/JsonReader.java
new file mode 100644
--- /dev/null	(date 1701943515029)
+++ b/src/main/java/utils/JsonReader.java	(date 1701943515029)
@@ -0,0 +1,31 @@
+package utils;
+
+import org.apache.commons.io.FileUtils;
+import org.json.simple.JSONObject;
+import org.json.simple.parser.JSONParser;
+import org.json.simple.parser.ParseException;
+
+import java.io.File;
+import java.io.IOException;
+
+public class JsonReader {
+    public static String getTestData(String key) throws IOException, ParseException {
+        String testdata;
+        return testdata = (String) getJsonData().get(key);//input is the key
+
+    }
+    public static JSONObject getJsonData() throws IOException, ParseException  {
+
+        //pass the path of the testdata.json file
+        File filename = new File("resources//TestData//testdata.json");
+        //convert json file into string
+        String json = FileUtils.readFileToString(filename, "UTF-8");
+        //parse the string into object
+        Object obj = new JSONParser().parse(json);
+        //give jsonobject o that I can return it to the function everytime it get called
+        JSONObject jsonObject = (JSONObject) obj;
+        return jsonObject;
+
+    }
+
+}
Index: src/main/java/utils/PropertyReader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/utils/PropertyReader.java b/src/main/java/utils/PropertyReader.java
new file mode 100644
--- /dev/null	(date 1701959782359)
+++ b/src/main/java/utils/PropertyReader.java	(date 1701959782359)
@@ -0,0 +1,37 @@
+package utils;
+
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.Properties;
+
+public class PropertyReader {
+    public static String propertyReader(String filePath,String key)
+
+    {
+        String value = null;
+
+        //Inputstream is required while loading into properties
+
+        try (InputStream input = new FileInputStream(filePath))
+        {
+
+            // object creation for Property class
+            Properties prop = new Properties();
+
+            // load a properties file
+            prop.load(input);
+
+            //getProperty will fetch the value according to the key
+            value=prop.getProperty(key);
+
+
+        } catch (IOException ex) {
+            ex.printStackTrace();
+        }
+        return value;
+
+    }
+
+
+}
Index: src/test/java/userMangement/ValidateTestDataFromPropertyFile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/userMangement/ValidateTestDataFromPropertyFile.java b/src/test/java/userMangement/ValidateTestDataFromPropertyFile.java
new file mode 100644
--- /dev/null	(date 1701961728855)
+++ b/src/test/java/userMangement/ValidateTestDataFromPropertyFile.java	(date 1701961728855)
@@ -0,0 +1,31 @@
+package userMangement;
+
+import io.restassured.RestAssured;
+import io.restassured.response.Response;
+import org.testng.annotations.Test;
+import utils.PropertyReader;
+
+import static io.restassured.RestAssured.given;
+import static org.testng.AssertJUnit.assertEquals;
+
+public class ValidateTestDataFromPropertyFile {
+    @Test
+    public void validateStatusCode() {
+        String webURI= PropertyReader.propertyReader("enviornmentdetails.properties","URI");
+        String endPoints=PropertyReader.propertyReader("enviornmentdetails.properties","endpoint");
+        System.out.println(webURI+endPoints);
+
+        // Send a GET request with a query parameter "page" set to 2 and store the response
+        RestAssured.baseURI=webURI;//reading from properties file;
+        Response resp =
+                given()
+                        .queryParam("page", 2)
+                        .when()
+                        .get(endPoints);
+        // Extract the actual status code from the response using RestAssured
+        int actualStatusCode = resp.statusCode();
+        // Assert that the actual status code is equal to the expected status code (200)
+        assertEquals(actualStatusCode, 200); // Using TestNG assertion
+        // Note: If the status code is not equal to 200, the assertion will fail and the test will be marked as failed.
+    }
+}
Index: .idea/uiDesigner.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/uiDesigner.xml b/.idea/uiDesigner.xml
new file mode 100644
--- /dev/null	(date 1701944473463)
+++ b/.idea/uiDesigner.xml	(date 1701944473463)
@@ -0,0 +1,124 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Palette2">
+    <group name="Swing">
+      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
+      </item>
+      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.svg" removable="false" auto-create-binding="false" can-attach-label="true">
+        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
+        <initial-values>
+          <property name="text" value="Button" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="RadioButton" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="CheckBox" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="Label" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
+          <preferred-size width="-1" height="20" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
+      </item>
+    </group>
+  </component>
+</project>
\ No newline at end of file
Index: src/test/java/userMangement/ValidateWithTestDataFromJson.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/userMangement/ValidateWithTestDataFromJson.java b/src/test/java/userMangement/ValidateWithTestDataFromJson.java
new file mode 100644
--- /dev/null	(date 1701945448408)
+++ b/src/test/java/userMangement/ValidateWithTestDataFromJson.java	(date 1701945448408)
@@ -0,0 +1,51 @@
+package userManagement;
+
+import core.StatusCode;
+import io.restassured.RestAssured;
+import io.restassured.response.Response;
+import org.testng.Assert;
+import org.testng.annotations.Test;
+import utils.JsonReader;
+
+import java.io.IOException;
+import org.json.simple.parser.ParseException;
+
+import static io.restassured.RestAssured.given;
+
+public class ValidateWithTestDataFromJson {
+
+    @Test
+    public void validateBasicAuthenticationWithTestData() throws IOException, ParseException {
+        String userName = JsonReader.getTestData("username");
+        String passWord = JsonReader.getTestData("password");
+        RestAssured.baseURI = "https://postman-echo.com";
+        Response response =
+                given()
+                        .auth()
+                        .basic(userName, passWord)
+                        .when()
+                        .get("/basic-auth");
+
+        int actualStatusCode = response.statusCode();
+        Assert.assertEquals(actualStatusCode, StatusCode.SUCCESS.code);
+       // System.out.println(response.body().asString());
+    }
+
+    @Test
+    public void validateDigestAuthenticationInResponseUsingTestData() throws IOException, ParseException {
+        String userName = JsonReader.getTestData("username");
+        String passWord = JsonReader.getTestData("password");
+        System.out.println("username is "+":"+ userName+" Password is: "+ passWord);
+        RestAssured.baseURI = "https://postman-echo.com";
+        Response response =
+                given()
+                        .auth()
+                        .digest(userName, passWord)
+                        .when()
+                        .get("/digest-auth");
+
+        int actualStatusCode = response.statusCode();
+        Assert.assertEquals(actualStatusCode, StatusCode.SUCCESS.code);
+        //System.out.println(response.body().asString());
+    }
+}
diff --git a/TestData/testData.json b/resources/TestData/testdata.json
rename from TestData/testData.json
rename to resources/TestData/testdata.json
